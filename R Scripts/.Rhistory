pheatmap(cor.mat)
library(pheatmap)
pheatmap(cor.mat)
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
A <- is.na(dat)
rmv.rows = apply(dat,1,function(x){sum(is.na(x))})
dat = dat[- which(rmv.rows > 0),]
cor.mat = cor(dat[,1:ncol(dat)], method="pearson") # First three columns are discrete data
round(cor.mat,2) # all pairwise correlations
par(mar=c(3,3,0.5,0.5), mgp=c(1.5,0.5,0), las=2)
pairs(dat[,1:ncol(dat)], pch=20, cex=0.5, col='navy')
library(pheatmap)
pheatmap(cor.mat)
l2 = lm(chol ~ weight,data=dat)
summary(l2)
hist(l2$residuals,breaks=20)
qqnorm(l2$residuals);qqline(l2$residuals)
cor(dat$weight,l2$residuals)
plot(dat$weight,l2$residuals,pch=20)
l3 = lm(chol ~ waist,data=dat)
summary(l3)
hist(l3$residuals,breaks=20)
qqnorm(l3$residuals);qqline(l3$residuals)
cor(dat$waist,l3$residuals)
plot(dat$waist,l3$residuals,pch=20)
l4 = lm(chol ~ hip,data=dat)
summary(l4)
hist(l4$residuals,breaks=20)
qqnorm(l4$residuals);qqline(l4$residuals)
cor(dat$hip,l4$residuals)
plot(dat$hip,l4$residuals,pch=20)
b1 <- summary(l2)$fstatistic
b1[1]
b2 <- summary(l3)$fstatistic
b2[1]
b3 <- summary(l4)$fstatistic
b3[1]
B <- c(b1[1],b2[1],b3[1])
plot(B)
cor.mat = cor(dat[,1:ncol(dat)], method="pearson") # First three columns are discrete data
#round(cor.mat,2) # all pairwise correlations
#par(mar=c(3,3,0.5,0.5), mgp=c(1.5,0.5,0), las=2)
pairs(dat[,1:ncol(dat)], pch=20, cex=0.5, col='navy')
pairs(dat[,1:ncol(dat)], pch=20, cex=10.5, col='navy')
pairs(dat[,1:ncol(dat)], pch=20, cex=0.05, col='navy')
l2 = lm(chol ~ weight,data=dat)
summary(l2)
hist(l2$residuals,breaks=20)
qqnorm(l2$residuals);qqline(l2$residuals)
cor(dat$weight,l2$residuals)
plot(dat$weight,l2$residuals,pch=20)
summary(l2)
l2 = lm(chol ~ weight,data=dat)
summary(l2)
hist(l2$residuals,breaks=20)
qqnorm(l2$residuals);qqline(l2$residuals)
cor(dat$weight,l2$residuals)
plot(dat$weight,l2$residuals,pch=20)
l3 = lm(chol ~ waist,data=dat)
summary(l3)
hist(l3$residuals,breaks=20)
qqnorm(l3$residuals);qqline(l3$residuals)
cor(dat$waist,l3$residuals)
plot(dat$waist,l3$residuals,pch=20)
l4 = lm(chol ~ hip,data=dat)
summary(l4)
hist(l4$residuals,breaks=20)
qqnorm(l4$residuals);qqline(l4$residuals)
cor(dat$hip,l4$residuals)
plot(dat$hip,l4$residuals,pch=20)
b1 <- summary(l2)$fstatistic
b1[1]
b2 <- summary(l3)$fstatistic
b2[1]
b3 <- summary(l4)$fstatistic
b3[1]
B <- c(b1[1],b2[1],b3[1])
plot(B)
l3 = lm(chol ~ waist,data=dat)
summary(l3)
hist(l3$residuals,breaks=20)
qqnorm(l3$residuals);qqline(l3$residuals)
cor(dat$waist,l3$residuals)
plot(dat$waist,l3$residuals,pch=20)
hist(l4$residuals,breaks=20)
l4 = lm(chol ~ hip,data=dat)
summary(l4)
l2 = lm(chol ~ weight,data=dat)
summary(l2)
hist(l2$residuals,breaks=20)
qqnorm(l2$residuals);qqline(l2$residuals)
cor(dat$weight,l2$residuals)
plot(dat$weight,l2$residuals,pch=20)
l3 = lm(chol ~ waist,data=dat)
summary(l3)
hist(l3$residuals,breaks=20)
qqnorm(l3$residuals);qqline(l3$residuals)
cor(dat$waist,l3$residuals)
plot(dat$waist,l3$residuals,pch=20)
l4 = lm(chol ~ hip,data=dat)
summary(l4)
hist(l4$residuals,breaks=20)
qqnorm(l4$residuals);qqline(l4$residuals)
cor(dat$hip,l4$residuals)
plot(dat$hip,l4$residuals,pch=20)
b1 <- summary(l2)$fstatistic
b1[1]
b2 <- summary(l3)$fstatistic
b2[1]
b3 <- summary(l4)$fstatistic
b3[1]
B <- c(b1[1],b2[1],b3[1])
plot(B)
summary(l3)
l2 = lm(chol ~ weight,data=dat)
summary(l2)
hist(l2$residuals,breaks=20)
qqnorm(l2$residuals);qqline(l2$residuals)
cor(dat$weight,l2$residuals)
plot(dat$weight,l2$residuals,pch=20)
l3 = lm(chol ~ waist,data=dat)
summary(l3)
hist(l3$residuals,breaks=20)
qqnorm(l3$residuals);qqline(l3$residuals)
cor(dat$waist,l3$residuals)
plot(dat$waist,l3$residuals,pch=20)
l4 = lm(chol ~ hip,data=dat)
summary(l4)
hist(l4$residuals,breaks=20)
qqnorm(l4$residuals);qqline(l4$residuals)
cor(dat$hip,l4$residuals)
plot(dat$hip,l4$residuals,pch=20)
b1 <- summary(l2)$fstatistic
b1[1]
b2 <- summary(l3)$fstatistic
b2[1]
b3 <- summary(l4)$fstatistic
b3[1]
B <- c(b1[1],b2[1],b3[1])
plot(B)
#Nummer1
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A1 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B1 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A2 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B2 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A3 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B3 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A4 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B4 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A5 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B5 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A6 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B6 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A7 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B7 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A8 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B8 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A9 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B9 = sqrt(1/n*sum(residuals^2))
i.train = sample (1:nrow(dat),200)
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
A10 = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
B10 = sqrt(1/n*sum(residuals^2))
C.1 <- c(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)
plot(C.1)
C.1.2 <- c(B1,B2,B3,B4,B5,B6,B7,B8,B9,B10)
plot(C.1.2)
#Nummer2, alternativ von dat
model1 <- lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d + waist + hip,data=dat.train)
summary(model1)
which(summary(model1)$coefficients[,4]<0.1)
model2 <- lm(chol ~ hdl + height + weight + bp.1s + hip,data=dat.train)
summary(model2)
which(summary(model1)$coefficients[,4]<0.05)
model3 <- lm(chol ~ hdl + height + weight + hip,data=dat.train)
summary(model3)
C3.1 <- c(summary(model1)$r.squared,summary(model2)$r.squared,summary(model3)$r.squared)
C3.2 <- c(summary(model1)$adj.r.squared,summary(model1)$adj.r.squared,summary(model1)$adj.r.squared)
f.model1 <- summary(model1)$fstatistic
p.model1 <- pf(f.model1[1],f.model1[2],f.model1[3],lower.tail=F)
f.model2 <- summary(model2)$fstatistic
p.model2 <- pf(f.model2[1],f.model2[2],f.model2[3],lower.tail=F)
f.model3 <- summary(model3)$fstatistic
p.model3 <- pf(f.model3[1],f.model3[2],f.model3[3],lower.tail=F)
C3.3 <- c(p.model1,p.model2,p.model3)
plot(C3.1,ylab =  "R-squared values")
plot(C3.2,ylab =  "Adjusted R-squared values")
plot(C3.3, ylab =  "P-values of F-statistic")
pheatmap(cor.mat, display_numbers = T)
mean(l2$residuals)
mean(l3$residuals)
mean(l4$residuals)
b1 <- summary(l2)$fstatistic
b1[1]
b1[1]; b1[[1]]
plot(B)
plot(B, ylab = 'F-value')
plot(B, type = 'B', ylab = 'F-value')
plot(B, type = 'b', ylab = 'F-value')
#Nummer2, alternativ von dat
model1 <- lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d + waist + hip,data=dat.train)
summary(model1)
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir = "~/")
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
i.na = which(apply(dat,1,function(x) {sum(is.na(x))})>0)
dat = dat[-i.na,]
dim(dat)
pairs(dat,col='red',pch=20)
library(gplots)
cor = cor(dat)
heatmap.2(cor,col = cm.colors(256),trace='none')
## compute correlation
cor(dat$stab.glu,dat$hip)
##
## test for significance
cor.test(dat$stab.glu,dat$hip)
dat = dat[apply(dat,1,function(x) {sum(is.na(x))==0}),]
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
# normal distribution of residuals?
hist(l.g$residuals,breaks=20)
##
qqnorm(l.g$residuals);qqline(l.g$residuals)
##
## correlation residuals x-values?
cor(dat$glyhb,l.g$residuals)
plot(dat$glyhb,l.g$residuals,pch=20)
plot(dat$chol,l.g$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
LM = lapply(2:ncol(dat), function(i) {
## this defines a formula of the type chol ~ variable
formula = as.formula(paste0('chol ~ ',colnames(dat)[i]))
## we run the linear model (lm)
lm(formula, data=dat)
})
names(LM) =colnames(dat)[2:ncol(dat)]
f = sapply(LM,function(x) {
summary(x)$fstatistic[1]
})
## now plot the values; the xaxt parameters removes the x-labels; they will
## be introduced in the axis command after
## the las=2 parameter makes sure that the x-axis labels are printed
## perpendicular
par(las=2);plot(f,xaxt='n',xlab='',ylab='F-value');axis(1,at=1:length(f),labels=names(f))
l1 = lm(chol ~ .,data=dat)
summary(l1)
l2 = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat)
summary(l2)
plot(dat$chol,l2$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
n = nrow(dat)
rmse = sqrt(1/n*sum(l2$residuals^2))
rmse
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
rmse.train = sqrt(1/n*sum(l.train$residuals^2))
rmse.train
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n*sum(residuals^2))
rmse.test
RMSE = sapply(1:10, function(i) {
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
n = nrow(dat.train)
rmse.train = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n*sum(residuals^2))
return(c(rmse.train,rmse.test))
})
## now do some plotting
plot(RMSE[1,],col='blue',pch=19,ylim=c(min(RMSE)-2,max(RMSE)+2));points(RMSE[2,],col='red',pch=19)
l0 = lm(chol ~ .,data=dat)
## extract the p-values
pval = summary(l0)$coefficients[,4]
## find the p-value with the largest p-value
i.remove = which.max(pval)
## second round
variables = colnames(dat)[-1] # cholesterol is not an explanatory variable!
formula = as.formula(paste0('chol ~',colnames(dat)[-c(1,i.remove)]))
l1 = lm(formula,data=dat)
summary(l1)
# remove the first column as this is the output variable
pca = prcomp(dat[,-1])
summary(pca)
par(las=2);barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red')
l.pca = lm(dat$chol ~ pca$x)
summary(l.pca)
knitr::opts_chunk$set(echo = TRUE) #TRUE bedeutet dass im geknitteden file alle chunks gezeigt werden
knitr::opts_chunk$set(echo = TRUE) #TRUE bedeutet dass im geknitteden file alle chunks gezeigt werden
knitr::opts_chunk$set(cache = TRUE) #nur chunks werden ausgeführt, die sich vrändern - oder die durch eine veränderung auch ändern
View(all.aml.exp.original)
View(all.aml.exp)
readline(Data 273K_CO2.txt)
View(all.aml.anno)
readline(Data_273K_CO2.txt)
readline(Data_273K_CO2.txt)
readline(Data_273K_CO2.txt)
knitr::opts_chunk$set(echo = TRUE)
Table1 -> readline(Data_273K_CO2.txt)
table1 = readline(Data_273K_CO2.txt)
table1 = read.table("Data_273K_CO2.txt")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
#table1 = read.table("Data_273K_CO2.txt")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
View(data1)
data3 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
View(data1)
View(data3)
data2 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
plot(data[,1],data[,2])
plot(data1[,1],data1[,2])
plot(data1[,1],data1[,2],xlim = [0,1.5])
axis(side=1, at=c[0,1.5])
axis(side=1, at=c[0,1])
axis(side=1, at=c(0,1,0.1)
plot(data1[,1],data1[,2],xlim = [0,1.5])
plot(data1[,1],data1[,2],xlim = [0,1.5])
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data2 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data3 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
plot(data1[,1],data1[,2])
axis(side=1, at=c(0,1,0.1))
plot(data1[,1],data1[,2])
plot(data1[,1],data1[,2],col='steelblue', pch=19, xaxt='n', yaxt='n')
axis(side=1, at=seq(0,1,by=0.01)
xis(side=2, at=seq(1, 205, by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xaxt='n', yaxt='n')
axis(side=1, at=seq(0,1,by=0.01)
axis(side=2, at=seq(1, 205, by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = seq(0,1.5,by=0.01), ylim = seq(0,205,by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205)
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data3[,1],data3[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data3[,1],data3[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
```{r setup, include=FALSE}
plot(data3[,1],data3[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
View(data1)
View(data2)
View(data2)
View(data3)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
knitr::opts_chunk$set(echo = TRUE)
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
knitr::opts_chunk$set(echo = TRUE)
x=rnorm(5000,mean=0,sd=1)
y=rnorm(5000,mean=5,sd=1)
plot(x,y)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
BiocManager::install(c("vsn", "affy", "AnnotationDbi"))
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocGenerics)
library(BiocVersion)
BiocManager::install(c("vsn", "affy", "AnnotationDbi"))
library(affy)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
BiocManager::install("vsn",force = TRUE)
library(vsn)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn",force = TRUE)
library(vsn)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn",force = TRUE)
library(vsn)
