b1[1]
b1[1]; b1[[1]]
plot(B)
plot(B, ylab = 'F-value')
plot(B, type = 'B', ylab = 'F-value')
plot(B, type = 'b', ylab = 'F-value')
#Nummer2, alternativ von dat
model1 <- lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d + waist + hip,data=dat.train)
summary(model1)
library(knitr)
library(rmdformats)
## Global options
options(max.print="120")
opts_chunk$set(echo=TRUE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
opts_knit$set(width=120)
opts_knit$set(root.dir = "~/")
tmp = read.table('https://www.dropbox.com/s/zviurze7c85quyw/diabetes_full.csv?dl=1',header=TRUE,sep="\t")
dat = tmp[,c(2,3,4,6,8,10,11,13,14,17,18)]
head(dat)
i.na = which(apply(dat,1,function(x) {sum(is.na(x))})>0)
dat = dat[-i.na,]
dim(dat)
pairs(dat,col='red',pch=20)
library(gplots)
cor = cor(dat)
heatmap.2(cor,col = cm.colors(256),trace='none')
## compute correlation
cor(dat$stab.glu,dat$hip)
##
## test for significance
cor.test(dat$stab.glu,dat$hip)
dat = dat[apply(dat,1,function(x) {sum(is.na(x))==0}),]
l.g = lm(chol ~ glyhb, data=dat)
summary(l.g)
# normal distribution of residuals?
hist(l.g$residuals,breaks=20)
##
qqnorm(l.g$residuals);qqline(l.g$residuals)
##
## correlation residuals x-values?
cor(dat$glyhb,l.g$residuals)
plot(dat$glyhb,l.g$residuals,pch=20)
plot(dat$chol,l.g$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
LM = lapply(2:ncol(dat), function(i) {
## this defines a formula of the type chol ~ variable
formula = as.formula(paste0('chol ~ ',colnames(dat)[i]))
## we run the linear model (lm)
lm(formula, data=dat)
})
names(LM) =colnames(dat)[2:ncol(dat)]
f = sapply(LM,function(x) {
summary(x)$fstatistic[1]
})
## now plot the values; the xaxt parameters removes the x-labels; they will
## be introduced in the axis command after
## the las=2 parameter makes sure that the x-axis labels are printed
## perpendicular
par(las=2);plot(f,xaxt='n',xlab='',ylab='F-value');axis(1,at=1:length(f),labels=names(f))
l1 = lm(chol ~ .,data=dat)
summary(l1)
l2 = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat)
summary(l2)
plot(dat$chol,l2$fitted.values,pch=20,col='blue', xlab='Real values',ylab='Predicted values');abline(0,1,col='red')
n = nrow(dat)
rmse = sqrt(1/n*sum(l2$residuals^2))
rmse
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
summary(l.train)
n = nrow(dat.train)
rmse.train = sqrt(1/n*sum(l.train$residuals^2))
rmse.train
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n*sum(residuals^2))
rmse.test
RMSE = sapply(1:10, function(i) {
##
## take 200 random patients to form the training set
i.train = sample (1:nrow(dat),200)
##
dat.train = dat[i.train,]
dat.test = dat[-i.train,]
l.train = lm(chol ~ stab.glu + hdl + glyhb + age + height + weight  + bp.1s + bp.1d,data=dat.train)
n = nrow(dat.train)
rmse.train = sqrt(1/n*sum(l.train$residuals^2))
pred = predict(l.train,newdata = dat.test)
n = nrow(dat.test)
residuals = dat.test$chol - pred
rmse.test = sqrt(1/n*sum(residuals^2))
return(c(rmse.train,rmse.test))
})
## now do some plotting
plot(RMSE[1,],col='blue',pch=19,ylim=c(min(RMSE)-2,max(RMSE)+2));points(RMSE[2,],col='red',pch=19)
l0 = lm(chol ~ .,data=dat)
## extract the p-values
pval = summary(l0)$coefficients[,4]
## find the p-value with the largest p-value
i.remove = which.max(pval)
## second round
variables = colnames(dat)[-1] # cholesterol is not an explanatory variable!
formula = as.formula(paste0('chol ~',colnames(dat)[-c(1,i.remove)]))
l1 = lm(formula,data=dat)
summary(l1)
# remove the first column as this is the output variable
pca = prcomp(dat[,-1])
summary(pca)
par(las=2);barplot(pca$rotation[,1],horiz=TRUE,main='PC1',col='red')
l.pca = lm(dat$chol ~ pca$x)
summary(l.pca)
knitr::opts_chunk$set(echo = TRUE) #TRUE bedeutet dass im geknitteden file alle chunks gezeigt werden
knitr::opts_chunk$set(echo = TRUE) #TRUE bedeutet dass im geknitteden file alle chunks gezeigt werden
knitr::opts_chunk$set(cache = TRUE) #nur chunks werden ausgef체hrt, die sich vr채ndern - oder die durch eine ver채nderung auch 채ndern
View(all.aml.exp.original)
View(all.aml.exp)
readline(Data 273K_CO2.txt)
View(all.aml.anno)
readline(Data_273K_CO2.txt)
readline(Data_273K_CO2.txt)
readline(Data_273K_CO2.txt)
knitr::opts_chunk$set(echo = TRUE)
Table1 -> readline(Data_273K_CO2.txt)
table1 = readline(Data_273K_CO2.txt)
table1 = read.table("Data_273K_CO2.txt")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
#table1 = read.table("Data_273K_CO2.txt")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
View(data1)
data3 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
View(data1)
View(data3)
data2 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
plot(data[,1],data[,2])
plot(data1[,1],data1[,2])
plot(data1[,1],data1[,2],xlim = [0,1.5])
axis(side=1, at=c[0,1.5])
axis(side=1, at=c[0,1])
axis(side=1, at=c(0,1,0.1)
plot(data1[,1],data1[,2],xlim = [0,1.5])
plot(data1[,1],data1[,2],xlim = [0,1.5])
data1 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data2 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
data3 <- read.table("Data_273K_CO2.txt", sep="\t", header=TRUE, dec=",")
plot(data1[,1],data1[,2])
axis(side=1, at=c(0,1,0.1))
plot(data1[,1],data1[,2])
plot(data1[,1],data1[,2],col='steelblue', pch=19, xaxt='n', yaxt='n')
axis(side=1, at=seq(0,1,by=0.01)
xis(side=2, at=seq(1, 205, by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xaxt='n', yaxt='n')
axis(side=1, at=seq(0,1,by=0.01)
axis(side=2, at=seq(1, 205, by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = seq(0,1.5,by=0.01), ylim = seq(0,205,by=1))
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = 0, ylim = 205)
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data3[,1],data3[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data3[,1],data3[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
```{r setup, include=FALSE}
plot(data3[,1],data3[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
View(data1)
View(data2)
View(data2)
View(data3)
plot(data2[,1],data2[,2],col='steelblue', pch=19)
knitr::opts_chunk$set(echo = TRUE)
plot(data1[,1],data1[,2],col='steelblue', pch=19, xlim = c(0,1.5), ylim = c(0,205))
plot(data2[,1],data2[,2],col='steelblue', pch=19)
plot(data3[,1],data3[,2],col='steelblue', pch=19)
knitr::opts_chunk$set(echo = TRUE)
x=rnorm(5000,mean=0,sd=1)
y=rnorm(5000,mean=5,sd=1)
plot(x,y)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
BiocManager::install(c("vsn", "affy", "AnnotationDbi"))
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
library(BiocGenerics)
library(BiocVersion)
BiocManager::install(c("vsn", "affy", "AnnotationDbi"))
library(affy)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install(version = "3.15")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn")
BiocManager::install("vsn",force = TRUE)
library(vsn)
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
install.packages("BiocManager")
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn",force = TRUE)
library(vsn)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("vsn",force = TRUE)
library(vsn)
knitr::opts_chunk$set(echo = TRUE)
#plotting pca_wochen
ggbiplot(pca_wochen, groups = diff_genes_ann_0.01$max.tissue) #groese anpassen damit plot sichtbar
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(psych)
#plotting pca_wochen
ggbiplot(pca_wochen, groups = diff_genes_ann_0.01$max.tissue) #groese anpassen damit plot sichtbar
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(tidyverse)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(tidyverse)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
#plotting pca_wochen
ggbiplot(pca_wochen, groups = diff_genes_ann_0.01$max.tissue) #groese anpassen damit plot sichtbar
#pca ueber spalten (wochen)
pca_wochen <- prcomp(diff_genes_ann_0.01[,1:18],center=TRUE, scale.=TRUE)
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(tidyverse)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
#setwd("C:/Users/david/Documents/Data Analysis Lokal/2022-topic-04-team-01/R Scripts")
#setwd("F:/Data Analysis Project/Github Repo/2022-topic-04-team-01/R Scripts") #Paul
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts") #Verena
#setwd("C:/Daten/Data Analysis Projekt/Github Repo/2022-topic-04-team-01/R Scripts")
load("embryo_df_tra.RData")
colnames(embryo_df_tra)
dim(embryo_df_tra)
head(embryo_df_tra)
str(embryo_df_tra)
library(tidyverse)
#Make Tissue names more accessible
a = separate(embryo_df_tra, tissues, into = as.character(c(1:30)), sep="/")
create_tissue_vector = function(f) {
f = unlist(f)
f = f[!is.na(f)]
return(f)
}
tissues = apply(a[,31:60],1, create_tissue_vector)
tissues = sapply(tissues, unlist)
a = a[,c(1:30, 61)]
a %>% add_column(tissues = NA)
a$tissues = tissues
embryo_df_tissues = a
save(embryo_df_tissues, file="embryo_df_tissues.RData")
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts")
load("week9-4_diff.RData")
week9_4_diff_tra = embryo_df_tissues[embryo_df_tissues$ensembl.transcript %in% tra_diff$ensembl.transcript, ]
save(week9_4_diff_tra, file="week9_4_diff_tra.RData")
library(limma)
#Differential gene expression: Limma Analysis 2, between weeks
limma_data = as.data.frame(embryo_df_tissues[1:18], rownames = embryo_df_tissues$ensembl.transcript)
weeks = c("week4", "week5", "week6", "week7", "week8", "week9")
f = factor(c("week4", "week4", "week4", "week5", "week5", "week5", "week6", "week6", "week6", "week7", "week7", "week7", "week8", "week8", "week8", "week9", "week9", "week9"), levels =weeks)
design = model.matrix(~0+f)
colnames(design) =  weeks
fit_2 = lmFit(limma_data, design)
contrast_all = makeContrasts(week9-week8, week9-week7, week9-week6, week9-week5, week9-week4, week8-week7,week8-week6, week8-week5, week8-week4, week7-week6, week7-week5, week7-week4, week6-week5, week6-week4, week5-week4, levels = design)
fit_all = contrasts.fit(fit_2, contrast_all)
fit_all = eBayes(fit_all)
results_all = decideTests(fit_all)
summary(results_all)
# Ausgabe mit Gennamen f체r einen Vergleich
top.table = topTable(fit_all,1, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
top.table[which(top.table$adj.P.Val < 0.01), ]
#Create list of all differentially expresssed genes
diff_genes_list_0.01 = c()
for (i in 1:15) {
top.table = topTable(fit_all,i, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
diff_genes_list_0.01 = c(diff_genes_list_0.01, rownames(top.table[which(top.table$adj.P.Val < 0.01), ]))
}
length(diff_genes_list_0.01) #4538
diff_genes_list_0.01 = diff_genes_list_0.01[!duplicated(diff_genes_list_0.01)]
length(diff_genes_list_0.01) #1818
#List with 5%
diff_genes_list_0.05 = c()
for (i in 1:15) {
top.table = topTable(fit_all,i, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
diff_genes_list_0.05 = c(diff_genes_list_0.05, rownames(top.table[which(top.table$adj.P.Val < 0.05), ]))
}
diff_genes_list_0.05 = diff_genes_list_0.05[!duplicated(diff_genes_list_0.05)]
knitr::opts_chunk$set(echo = TRUE)
library(Rcpp)
library(tidyverse)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
#setwd("C:/Users/david/Documents/Data Analysis Lokal/2022-topic-04-team-01/R Scripts")
#setwd("F:/Data Analysis Project/Github Repo/2022-topic-04-team-01/R Scripts") #Paul
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts") #Verena
#setwd("C:/Daten/Data Analysis Projekt/Github Repo/2022-topic-04-team-01/R Scripts")
load("embryo_df_tra.RData")
library(tidyverse)
#Make Tissue names more accessible
a = separate(embryo_df_tra, tissues, into = as.character(c(1:30)), sep="/")
create_tissue_vector = function(f) {
f = unlist(f)
f = f[!is.na(f)]
return(f)
}
tissues = apply(a[,31:60],1, create_tissue_vector)
tissues = sapply(tissues, unlist)
a = a[,c(1:30, 61)]
a %>% add_column(tissues = NA)
a$tissues = tissues
embryo_df_tissues = a
save(embryo_df_tissues, file="embryo_df_tissues.RData")
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts")
load("week9-4_diff.RData")
week9_4_diff_tra = embryo_df_tissues[embryo_df_tissues$ensembl.transcript %in% tra_diff$ensembl.transcript, ]
save(week9_4_diff_tra, file="week9_4_diff_tra.RData")
# Ausgabe mit Gennamen f체r einen Vergleich
top.table = topTable(fit_all,1, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
top.table[which(top.table$adj.P.Val < 0.01), ]
#Create list of all differentially expresssed genes
diff_genes_list_0.01 = c()
for (i in 1:15) {
top.table = topTable(fit_all,i, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
diff_genes_list_0.01 = c(diff_genes_list_0.01, rownames(top.table[which(top.table$adj.P.Val < 0.01), ]))
}
#Select differential genes from annotated dataframe
diff_genes_ann_0.01 = embryo_df_tissues[embryo_df_tissues$ensembl.transcript %in% diff_genes_list_0.01, ]
save(diff_genes_ann_0.01, file = "diff_genes_ann_0.01.RData")
#pca ueber spalten (wochen)
pca_wochen <- prcomp(diff_genes_ann_0.01[,1:18],center=TRUE, scale.=TRUE)
summary(pca_wochen)
pca_wochen_df <- data.frame(pca_wochen$x[, 1:2])
library(devtools)
install_github("vqv/ggbiplot")
library(ggbiplot)
library(psych)
#plotting pca_wochen
ggbiplot(pca_wochen, groups = diff_genes_ann_0.01$max.tissue) #groese anpassen damit plot sichtbar
ggbiplot(pca_wochen, labels=colnames(diff_genes_ann_0.01)[1:18])
ggbiplot(pca_wochen, choices=c(2,3))
ggbiplot(pca_wochen, choices=c(3,4))
#ggbiplot(pca_wochen,labels=diff_genes_ann_0.01['max.tissue']) #nicht lesbar
#ggbiplot(pca_wochen,groups=c(diff_genes_ann_0.01['max.tissue']))
#ggplot
pca_wochen_plot <- ggplot(
pca_wochen_df,
aes(
x = PC1,
y = PC2,
#color=c(diff_genes_ann_0.01['max.tissue'])
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_wochen_plot
pairs.panels(pca_wochen$x,
gap=0,
bg = c("red", "yellow", "blue"),
pch=21)
#pca ueber zeilen (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transpose our data frame to obtain PC scores for samples, not genes
scale. = TRUE # we want the data scaled to have unit variance for each gene
)
summary(pca_genes)
pca_genes_df <- data.frame(pca_genes$x[, 1:2])
#plotting pca_genes
ggbiplot(pca_genes)
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
#ggplot
pca_genes_plot <- ggplot(
pca_genes_df,
aes(
x = PC1,
y = PC2,
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_genes_plot
#plotting pca_genes
ggbiplot(pca_genes)
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
#ggplot
pca_genes_plot <- ggplot(
pca_genes_df,
aes(
x = PC1,
y = PC2,
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_genes_plot
#pca ueber zeilen (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transpose our data frame to obtain PC scores for genes, not weeks
scale. = TRUE
)# we want the data scaled to have unit variance
summary(pca_genes)
pca_genes_df <- data.frame(pca_genes$x[, 1:2])
#pca ueber zeilen (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transpose our data frame to obtain PC scores for genes, not weeks
scale. = TRUE
)# we want the data scaled to have unit variance
summary(pca_genes)
pca_genes_df <- data.frame(pca_genes$x[, 1:2])
#plotting pca_genes
ggbiplot(pca_genes)
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
#ggplot
pca_genes_plot <- ggplot(
pca_genes_df,
aes(
x = PC1,
y = PC2,
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_genes_plot
ggbiplot(pca_wochen, groups = diff_genes_ann_0.01$max.tissue)
ggbiplot(pca_genes, groups = diff_genes_ann_0.01$max.tissue)
head(diff_genes_ann_0.01)
dim(diff_genes_ann_0.01)
