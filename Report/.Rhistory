data.ENST00000518312 =cbind(data.ENST00000518312,week)
data.ENST00000521485 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000521485")))
data.ENST00000521485 = data.ENST00000521485[,1:18]
week_4 =data.ENST00000521485[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000521485[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000521485[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000521485[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000521485[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000521485[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000521485 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000521485 =cbind(data.ENST00000521485,week)
# ENST00000577440
data.ENST00000577440 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000577440")))
data.ENST00000577440 = data.ENST00000577440[,1:18]
week_4 =data.ENST00000577440[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000577440[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000577440[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000577440[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000577440[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000577440[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000577440 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000577440 =cbind(data.ENST00000577440,week)
# ENST00000439476
data.ENST00000439476 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000439476")))
data.ENST00000439476 = data.ENST00000439476[,1:18]
week_4 =data.ENST00000439476[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000439476[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000439476[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000439476[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000439476[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000439476[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000439476 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000439476 =cbind(data.ENST00000439476,week)
# ENST00000539563
data.ENST00000539563 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000539563")))
data.ENST00000539563 = data.ENST00000539563[,1:18]
week_4 =data.ENST00000539563[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000539563[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000539563[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000539563[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000539563[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000539563[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000539563 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000539563 =cbind(data.ENST00000539563,week)
# Data for cytokine geneexpression was generated
# ENST00000337225
data.ENST00000337225 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000337225")))
data.ENST00000337225 = data.ENST00000337225[,1:18]
week_4 =data.ENST00000337225[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000337225[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000337225[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000337225[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000337225[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000337225[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000337225 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000337225 =cbind(data.ENST00000337225,week)
# ENST00000579298
data.ENST00000579298 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000579298")))
data.ENST00000579298 = data.ENST00000579298[,1:18]
week_4 =data.ENST00000579298[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000579298[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000579298[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000579298[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000579298[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000579298[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000579298 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000579298 =cbind(data.ENST00000579298,week)
# ENST00000555247
data.ENST00000555247 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000555247")))
data.ENST00000555247 = data.ENST00000555247[,1:18]
week_4 =data.ENST00000555247[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000555247[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000555247[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000555247[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000555247[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000555247[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000555247 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000555247 =cbind(data.ENST00000555247,week)
# ENST00000590261
data.ENST00000590261 = as.data.frame(embryo_df_tissues %>%
filter(ensembl.transcript == str_extract(ENST, "ENST00000590261")))
data.ENST00000590261 = data.ENST00000590261[,1:18]
week_4 =data.ENST00000590261[1:3]
week_4 = apply(week_4,1,median)
week_5 =data.ENST00000590261[4:6]
week_5 = apply(week_5,1,median)
week_6 =data.ENST00000590261[7:9]
week_6 = apply(week_6,1,median)
week_7 =data.ENST00000590261[10:12]
week_7 = apply(week_7,1,median)
week_8 =data.ENST00000590261[13:15]
week_8 = apply(week_8,1,median)
week_9 =data.ENST00000590261[16:18]
week_9 = apply(week_9,1,median)
data.ENST00000590261 = c(week_4,week_5,week_6,week_7,week_8,week_9)
data.ENST00000590261 =cbind(data.ENST00000590261,week)
# Plotting of the gained geneexpression data
par(mfrow = c(1, 3))
#Plot for ion channel gene
plot(data.ENST00000531293[,2],data.ENST00000531293[,1],type = "b",lwd=1,pch=19, main = "Geneexpression level during week 4 to 9", xlab = "weeks",ylab = "Expressionlevel",col = "red")
legend(3.8, 9.25, legend=c("ENST00000531293"),col=c("red"), lty=1, cex=0.3,title="Expressed genes")
#Plot for neuronal development and function genes
plot(data.ENST00000602349[,2],data.ENST00000602349[,1],type = "b",lwd=1,pch=19, main = "Geneexpression level during week 4 to 9", xlab = "weeks",ylab = "Expressionlevel",col = "red", ylim = c(6.3,8.4))+lines(data.ENST00000276646[,2],data.ENST00000276646[,1],type = "b",lwd=1,pch=19, col = "blue") +lines(data.ENST00000529690[,2],data.ENST00000529690[,1],type = "b",lwd=1,pch=19, col = "orange")+lines(data.ENST00000356660[,2],data.ENST00000356660[,1],type = "b",lwd=1,pch=19,col = "green")+lines(data.ENST00000518312[,2],data.ENST00000518312[,1],type = "b",lwd=1,pch=19,col = "black")+lines(data.ENST00000521485[,2],data.ENST00000521485[,1],type = "b",lwd=1,pch=19,col = "pink") +lines(data.ENST00000577440[,2],data.ENST00000577440[,1],type = "b",lwd=1,pch=19,col = "purple")+lines(data.ENST00000439476[,2],data.ENST00000439476[,1],type = "b",lwd=1,pch=19,col = "salmon")+lines(data.ENST00000539563[,2],data.ENST00000539563[,1],type = "b",lwd=1,pch=19,col = "yellowgreen")
legend(3.8, 8.5, legend=c("ENST00000602349", "ENST00000276646", "ENST00000529690", "ENST00000356660", "ENST00000518312", "ENST00000521485", "ENST00000577440", "ENST00000439476", "ENST00000539563"),col=c("red", "blue", "orange", "green","black", "pink", "purple", "salmon", "yellowgreen"), lty=1, cex=0.3,title="Expressed genes")
# Plot for cytokine genes
plot(data.ENST00000337225[,2],data.ENST00000337225[,1],type = "b",lwd=1,pch=19, main = "Geneexpression level during week 4 to 9", xlab = "weeks",ylab = "Expressionlevel",col = "red",ylim = c(7.6,9.7)) +lines(data.ENST00000579298[,2],data.ENST00000579298[,1],type = "b",lwd=1,pch=19,col = "blue")+lines(data.ENST00000555247[,2],data.ENST00000555247[,1],type = "b",lwd=1,pch=19,col = "orange")+lines(data.ENST00000590261[,2],data.ENST00000590261[,1],type = "b",lwd=1,pch=19,col = "green")
legend(3.8, 9.8, legend=c("ENST00000337225", "ENST00000579298", "ENST00000555247", "ENST00000590261"),col=c("red", "blue", "orange", "green"), lty=1, cex=0.3,title="Expressed genes")
#pca on rows (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transposed matrix
scale. = TRUE # data scaled to have unit variance
)
#taking a first look
summary(pca_genes)
#visualizing the variance of the PCAs
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
#column with percent variance
mutate(pct = variance/sum(variance)*100) %>%
#column with cumulative variance explained
mutate(pct_cum = cumsum(pct))
#actual plot
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained") +
theme(aspect.ratio = 1)
loadings = pca_genes$rotation[,"PC1"]
pca_df = data.frame(diff_genes_ann_0.01[,c("ensembl.transcript", "HGNC.symbol", "tissues")], Loadings = loadings)
pca_df[order(abs(pca_df$Loadings), decreasing = TRUE),]
#PCA for Heart transripts
#tissue = "Heart"
#bool_contained = sapply(diff_genes_ann_0.01$tissues, function(x) {grepl(tissue, toString(x))})
test_genes = diff_genes_ann_0.01  #[bool_contained,]
#pca on rows (genes)
pca_genes <- prcomp(
t(test_genes[,1:18]), # transposed matrix
scale. = TRUE # data scaled to have unit variance
)
#taking a first look
summary(pca_genes)
loadings = pca_genes$rotation[,"PC1"]
pca_df = data.frame(test_genes[,c("ensembl.transcript", "HGNC.symbol", "tissues")], Loadings = loadings)
pca_df[order(abs(pca_df$Loadings), decreasing = TRUE),]
test_genes
ranks_pca = data.frame(test_genes[,c("ensembl.transcript", "HGNC.symbol")], PC1 = NA, PC2 = NA, PC3 = NA, PC4 = NA, PC5 = NA)
PC_vector = c("PC1", "PC2", "PC3", "PC4", "PC5")
for (i in PC_vector) {
loadings = pca_genes$rotation[,i]
pca_df = data.frame(test_genes$ensembl.transcript, Loadings = loadings, Order = c(1:length(test_genes$ensembl.transcript)))
pca_df = pca_df[order(abs(pca_df$Loadings), decreasing = TRUE),]
pca_df$rank = c(1:length(test_genes$ensembl.transcript))
pca_df = pca_df[order(pca_df$Order),]
ranks_pca[,i] =  pca_df$rank
}
ranks_pca$sum = ranks_pca$PC1*4 - ranks_pca$PC2 - ranks_pca$PC3 - ranks_pca$PC4 - ranks_pca$PC5
ranks_pca[order(ranks_pca$sum),]
PCA1_first_five <- diff_genes_ann_0.01[c('9703','11797','13044','616','15025'),0:19]
#median of the transcripts for each week
PCA1_4 <- PCA1_first_five[,c(1,2,3)]
week4 <- t(data.frame(apply(PCA1_4,1,median)))
PCA1_5 <- PCA1_first_five[,c(4,5,6)]
week5 <- t(data.frame(apply(PCA1_5,1,median)))
PCA1_6 <- PCA1_first_five[,c(7,8,9)]
week6 <- t(data.frame(apply(PCA1_6,1,median)))
PCA1_7 <- PCA1_first_five[,c(10,11,12)]
week7 <- t(data.frame(apply(PCA1_7,1,median)))
PCA1_8 <- PCA1_first_five[,c(13,14,15)]
week8 <- t(data.frame(apply(PCA1_8,1,median)))
PCA1_9 <- PCA1_first_five[,c(16,17,18)]
week9 <- t(data.frame(apply(PCA1_9,1,median)))
#combining in a dataframe
first_five <- rbind(week4,week5,week6,week7,week8,week9)
#plotting the expression over weeks
matplot(first_five, type = 'b',pch=16,col = c('black','red','green','blue','orange'), xlab = 'Weeks', ylab = 'Expression Level', main = 'Five transcripts with most contribution to PCA1' , xaxt='n')
axis(side = 1, at = 1:6, labels = c(4,5,6,7,8,9))
legend('bottomright', legend = c('ENST00000399848','ENST00000432997','ENST00000452583','ENST00000241274','ENST00000475390'), col=c('black','red','green','blue','orange'), pch=16, cex=1,title="Expressed genes")
file_heatmap = "https://raw.githubusercontent.com/datascience-mobi-2022/2022-topic-04-team-01/main/Plots/Organ%20development/General%20Explanation/Heatmap%20TRA%20Overlap_edited.png"
download.file(file_heatmap, "TRA_overlap_edited.png", mode = "wb")
ggdraw() + draw_image("TRA_overlap_edited.png")
get_gene_info = function(transcript_ids){
table = data.frame(Transcript = NA, Gene = NA, Protein = NA, Summary = NA)
for(x in transcript_ids) {
table = rbind(table, get_single_transcript(x))
}
table
}
get_single_transcript = function(single_transcript) {
res = entrez_search(db = "gene", term = single_transcript)
if(!length(res$ids)==0) {
results = entrez_summary(db = "gene", id = res$ids)
c(single_transcript, as.character(results[2]),  as.character(results[3]),  as.character(results[17]))
}
else{
c(single_transcript, NA, NA, NA)
}
}
spleen1_gene_description = get_gene_info(rownames(spleen_genes_clustered_1))
spleen2_gene_description = get_gene_info(rownames(spleen_genes_clustered_2))
# Create a dataset for the volcano plot from the limma analysis
# Ausgabe der Toptabel vom Vergleich Woche 4/9
top.table = topTable(fit_all,5, n = Inf)
head(top.table)
# Create a function for volcano plot
volcanizator <- function(data, logFC_thresh_upper, logFC_thresh_lower, max_pValue){
# Point colours
mycolours <- c("blue", "red", "black")
names(mycolours) <- c("DOWN", "UP", "NO")
# Add a column to the data frame to specify if they are UP- or DOWN- regulated (log2FoldChange respectively positive or negative)
data$diffexpressed <- "NO"
data$diffexpressed[data$logFC > logFC_thresh_upper & data$adj.P.Val < max_pValue] <- "UP"
data$diffexpressed[data$logFC < logFC_thresh_lower & data$adj.P.Val < max_pValue] <- "DOWN"
# Create a new column with names of differential expressed genes
data$delabel <- NA
#data$delabel[data$diffexpressed != "NO"] <- data$HGNC.symbol[data$diffexpressed != "NO"]
# Plot
ggplot(data, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = diffexpressed), size=0.9) +
theme_minimal() +
geom_text_repel(aes(label = delabel)) + #, force = 5, point.padding	= unit(5, "cm")
geom_vline(xintercept=c(logFC_thresh_lower, logFC_thresh_upper), col="red") + # log2FoldChange thresholds
geom_hline(yintercept=-log10(max_pValue), col="red") + # p-value threshold
scale_colour_manual(values = mycolours) +
geom_text(aes(label = delabel)) +
labs(title = paste("Differential gene expression: week 4 to 9"),
subtitle = "GEO dataset: GSE15744",
caption = "p Value adjusted: Benjamini & Hochberg (1995)"
) +
xlab("log2FC") +
ylab("-log10(adj.P.Val)")
}
volcano <- volcanizator(top.table, 1, -1, 0.01)
volcano
par(mfrow = c(1, 3))
#PCA 1&2
ggbiplot(pca_genes) +
theme(aspect.ratio = 1)
#PCA 2&3
ggbiplot(pca_genes, choices=c(2,3)) +
theme(aspect.ratio = 1)
#PCA 1&3
ggbiplot(pca_genes, choices=c(1,3)) +
theme(aspect.ratio = 1)
surface_image_plot = ggdraw() + draw_image("Surface image.png")
RNA_degradation_plot = ggdraw() + draw_image("RNA degradation plot.png")
OC_chip_plot = arrangeGrob(grobs = list(surface_image_plot, RNA_degradation_plot),
nrow=1, widths = c(3,3), heights = c(3))
OC_chip_plot_output = as_ggplot(OC_chip_plot) +
draw_plot_label(label = c("A", "B"), size = 15, x = c(0.01, 0.50), y = c(0.17, 0.17))
annotate_figure(OC_chip_plot_output, top = text_grob("Quality control: verifying the surface image and RNA degradation", color = "black", face = "bold", size = 16))
surface_image_plot = ggdraw() + draw_image("Surface image.png")
RNA_degradation_plot = ggdraw() + draw_image("RNA degradation plot.png")
OC_chip_plot = arrangeGrob(grobs = list(surface_image_plot, RNA_degradation_plot),
nrow=1, widths = c(3,3), heights = c(3))
OC_chip_plot_output = as_ggplot(OC_chip_plot) +
draw_plot_label(label = c("A", "B"), size = 15, x = c(0.01, 0.50), y = c(0.17, 0.17))
annotate_figure(OC_chip_plot_output, top = text_grob("Quality control: verifying the surface\nimage and RNA degradation", color = "black", face = "bold", size = 16))
# Make Venn diagram from list of groups
colors <- c("#ff4059", "#2cff21", "yellow")
venn.diagram(x = list(paper_df_ann$ensembl.transcript, embryo_df_tissues$ensembl.transcript, diff_genes_ann_0.01$ensembl.transcript) ,
category.names = c("data from paper", "our TRA data", "our diff. data"),
filename = 'venn_diagramm_comparison_paper.png',
output=TRUE,
imagetype="png",
#na = "none",
#scaled = FALSE,
height = 1000 ,
width = 1000 ,
resolution = 300,
compression = "lzw",
col = "black",
fill = colors,
cat.col = colors,
cat.cex = 1.4,
cat.pos = c(350,10,0),
#margin = 0
main = "**Venn diagramm of differentially expressed genes\nfrom our TRA data and data of the original paper**"
)
ggdraw() + draw_image("venn_diagramm_comparison_paper.png")
ggdraw() + draw_image("venn_diagramm_comparison_paper.png")
# Make Venn diagram from list of groups
colors <- c("#ff4059", "#2cff21", "yellow")
venn.diagram(x = list(paper_df_ann$ensembl.transcript, embryo_df_tissues$ensembl.transcript, diff_genes_ann_0.01$ensembl.transcript) ,
category.names = c("data from paper", "our TRA data", "our diff. data"),
filename = 'venn_diagramm_comparison_paper.png',
output=TRUE,
imagetype="png",
#na = "none",
#scaled = FALSE,
height = 1000 ,
width = 1000 ,
resolution = 300,
compression = "lzw",
col = "black",
fill = colors,
cat.col = colors,
cat.cex = 1.4,
cat.pos = c(350,10,0),
#margin = 0
main = "Venn diagramm of differentially expressed genes\nfrom our TRA data and data of the original paper"
)
ggdraw() + draw_image("venn_diagramm_comparison_paper.png")
exprs.GSE15744.vsnrma <- as.data.frame(exprs(data.GSE15744.vsnrma))
scatterplot.GSE15744.vsnrma <- ggplot(data = exprs.GSE15744.vsnrma) +
theme_bw() +
geom_point(mapping = aes(exprs.GSE15744.vsnrma[,4], exprs.GSE15744.vsnrma[,5]), size = 0.5) +
geom_abline(intersept = 0, slope = 1, col = "red", aes(size=1)) +
labs(title = "Scatterplot of microarrays,\ntwo replicas of week 5",
x = colnames(data.GSE15744.vsnrma)[4],
y = colnames(data.GSE15744.vsnrma)[5])+ theme(aspect.ratio = 1)
OC_normalization_plot = arrangeGrob(grobs = list(meansdplot.GSE15744.vsnrma, boxplot.GSE15744.vsnrma, scatterplot.GSE15744.vsnrma),
nrow=1, widths = c(3,3,3), heights = c(3.5))
OC_normalization_plot_output = as_ggplot(OC_normalization_plot) +
draw_plot_label(label = c("A", "B", "C"), size = 15, x = c(0.01, 0.36, 0.71), y = c(0.13, 0.13, 0.13))
annotate_figure(OC_normalization_plot_output, top = text_grob("Quality control: verifying the normalization at different levels of detail", color = "black", face = "bold", size = 16))
#visualizing the variance of the PCAs
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
#column with percent variance
mutate(pct = variance/sum(variance)*100) %>%
#column with cumulative variance explained
mutate(pct_cum = cumsum(pct))
#actual plot
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained") +
theme(aspect.ratio = 1)
#visualizing the variance of the PCAs
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
#column with percent variance
mutate(pct = variance/sum(variance)*100) %>%
#column with cumulative variance explained
mutate(pct_cum = cumsum(pct))
#actual plot
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained") +
theme(aspect.ratio = 1)
PCA1_first_five <- diff_genes_ann_0.01[c('9703','11797','13044','616','15025'),0:19]
#median of the transcripts for each week
PCA1_4 <- PCA1_first_five[,c(1,2,3)]
week4 <- t(data.frame(apply(PCA1_4,1,median)))
PCA1_5 <- PCA1_first_five[,c(4,5,6)]
week5 <- t(data.frame(apply(PCA1_5,1,median)))
PCA1_6 <- PCA1_first_five[,c(7,8,9)]
week6 <- t(data.frame(apply(PCA1_6,1,median)))
PCA1_7 <- PCA1_first_five[,c(10,11,12)]
week7 <- t(data.frame(apply(PCA1_7,1,median)))
PCA1_8 <- PCA1_first_five[,c(13,14,15)]
week8 <- t(data.frame(apply(PCA1_8,1,median)))
PCA1_9 <- PCA1_first_five[,c(16,17,18)]
week9 <- t(data.frame(apply(PCA1_9,1,median)))
#combining in a dataframe
first_five <- rbind(week4,week5,week6,week7,week8,week9)
#plotting the expression over weeks
matplot(first_five, type = 'b',pch=16,col = c('black','red','green','blue','orange'), xlab = 'Weeks', ylab = 'Expression Level', main = 'Five transcripts with most contribution to PCA1' , xaxt='n')
axis(side = 1, at = 1:6, labels = c(4,5,6,7,8,9))
legend('bottomright', legend = c('ENST00000399848','ENST00000432997','ENST00000452583','ENST00000241274','ENST00000475390'), col=c('black','red','green','blue','orange'), pch=16, cex=1,title="Expressed genes")
PCA1_first_five <- diff_genes_ann_0.01[c('9703','11797','13044','616','15025'),0:19]
#median of the transcripts for each week
PCA1_4 <- PCA1_first_five[,c(1,2,3)]
week4 <- t(data.frame(apply(PCA1_4,1,median)))
PCA1_5 <- PCA1_first_five[,c(4,5,6)]
week5 <- t(data.frame(apply(PCA1_5,1,median)))
PCA1_6 <- PCA1_first_five[,c(7,8,9)]
week6 <- t(data.frame(apply(PCA1_6,1,median)))
PCA1_7 <- PCA1_first_five[,c(10,11,12)]
week7 <- t(data.frame(apply(PCA1_7,1,median)))
PCA1_8 <- PCA1_first_five[,c(13,14,15)]
week8 <- t(data.frame(apply(PCA1_8,1,median)))
PCA1_9 <- PCA1_first_five[,c(16,17,18)]
week9 <- t(data.frame(apply(PCA1_9,1,median)))
#combining in a dataframe
first_five <- rbind(week4,week5,week6,week7,week8,week9)
#plotting the expression over weeks
matplot(first_five, type = 'b',pch=16,col = c('black','red','green','blue','orange'), xlab = 'Weeks', ylab = 'Expression Level', main = 'Five transcripts with most contribution to PCA1' , xaxt='n')
axis(side = 1, at = 1:6, labels = c(4,5,6,7,8,9))
legend('bottomright', legend = c('ENST00000399848','ENST00000432997','ENST00000452583','ENST00000241274','ENST00000475390'), col=c('black','red','green','blue','orange'), pch=16, cex=1,title="Expressed genes")
# Create a dataset for the volcano plot from the limma analysis
# Ausgabe der Toptabel vom Vergleich Woche 4/9
top.table = topTable(fit_all,5, n = Inf)
# Create a function for volcano plot
volcanizator <- function(data, logFC_thresh_upper, logFC_thresh_lower, max_pValue){
# Point colours
mycolours <- c("blue", "red", "black")
names(mycolours) <- c("DOWN", "UP", "NO")
# Add a column to the data frame to specify if they are UP- or DOWN- regulated (log2FoldChange respectively positive or negative)
data$diffexpressed <- "NO"
data$diffexpressed[data$logFC > logFC_thresh_upper & data$adj.P.Val < max_pValue] <- "UP"
data$diffexpressed[data$logFC < logFC_thresh_lower & data$adj.P.Val < max_pValue] <- "DOWN"
# Create a new column with names of differential expressed genes
data$delabel <- NA
#data$delabel[data$diffexpressed != "NO"] <- data$HGNC.symbol[data$diffexpressed != "NO"]
# Plot
ggplot(data, aes(x=logFC, y=-log10(adj.P.Val))) +
geom_point(aes(colour = diffexpressed), size=0.9) +
theme_minimal() +
geom_text_repel(aes(label = delabel)) + #, force = 5, point.padding	= unit(5, "cm")
geom_vline(xintercept=c(logFC_thresh_lower, logFC_thresh_upper), col="red") + # log2FoldChange thresholds
geom_hline(yintercept=-log10(max_pValue), col="red") + # p-value threshold
scale_colour_manual(values = mycolours) +
geom_text(aes(label = delabel)) +
labs(title = paste("Differential gene expression: week 4 to 9"),
subtitle = "GEO dataset: GSE15744",
caption = "p Value adjusted: Benjamini & Hochberg (1995)"
) +
xlab("log2FC") +
ylab("-log10(adj.P.Val)")
}
volcano <- volcanizator(top.table, 1, -1, 0.01)
volcano
par(mfrow = c(1, 3))
#PCA 1&2
ggbiplot(pca_genes) +
theme(aspect.ratio = 1)
#PCA 2&3
ggbiplot(pca_genes, choices=c(2,3)) +
theme(aspect.ratio = 1)
#PCA 1&3
ggbiplot(pca_genes, choices=c(1,3)) +
theme(aspect.ratio = 1)
par(mfrow = c(1, 3))
#PCA 1&2
ggbiplot(pca_genes) +
theme(aspect.ratio = 1)
#PCA 2&3
ggbiplot(pca_genes, choices=c(2,3)) +
theme(aspect.ratio = 1)
#PCA 1&3
ggbiplot(pca_genes, choices=c(1,3)) +
theme(aspect.ratio = 1)
par(mfrow = c(1, 3))
#PCA 1&2
ggbiplot(pca_genes) +
theme(aspect.ratio = 1)
#PCA 2&3
ggbiplot(pca_genes, choices=c(2,3)) +
theme(aspect.ratio = 1)
#PCA 1&3
ggbiplot(pca_genes, choices=c(1,3)) +
theme(aspect.ratio = 1)
par(mfrow = c(1, 3))
#PCA 1&2
ggbiplot(pca_genes) +
theme(aspect.ratio = 1)
#PCA 2&3
ggbiplot(pca_genes, choices=c(2,3)) +
theme(aspect.ratio = 1)
#PCA 1&3
ggbiplot(pca_genes, choices=c(1,3)) +
theme(aspect.ratio = 1)
