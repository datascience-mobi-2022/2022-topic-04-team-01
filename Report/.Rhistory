library(knitr)
#library(rmdformats)
## Global options
#options(max.print="120")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
#opts_knit$set(width=120)
#opts_knit$set(root.dir  = "~/")
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(Rcpp)
library(tidyverse)
library(vsn)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
all_libraries <- tibble::tribble(
~Library...package,                        ~Version,                              ~Description,
"affy",                              NA, "library used for unpacking the raw data",
"vsn",                              NA,   "library for the vsn rma normalization",
"AnnotationDbi",                              NA,                                        NA,
"tidyverse", "library used for Datacleaning",                       "Library / package",
"Version",                   "Description",                                    "affy"
)
all_libraries %>%
kable(all_libraries, digits = 3, row.names = FALSE, align = "c", caption = "Table 1: summary of all libraries used") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
install.packages("biomaRt")
install.packages("biomaRt")
knitr::opts_chunk$set(echo = TRUE)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("biomaRt")
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(Rcpp)
library(tidyverse)
library(vsn)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
library(kableExtra)
install.packages("kableExtra")
install.packages("Rfssa")
library(knitr)
#library(rmdformats)
## Global options
#options(max.print="120")
opts_chunk$set(echo=FALSE,
cache=TRUE,
prompt=FALSE,
tidy=TRUE,
comment=NA,
message=FALSE,
warning=FALSE)
#opts_knit$set(width=120)
#opts_knit$set(root.dir  = "~/")
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(Rcpp)
library(tidyverse)
library(vsn)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
library(kableExtra)
library(Rfssa)
all_libraries <- tibble::tribble(
~Library...package,                        ~Version,                              ~Description,
"affy",                              NA, "library used for unpacking the raw data",
"vsn",                              NA,   "library for the vsn rma normalization",
"AnnotationDbi",                              NA,                                        NA,
"tidyverse", "library used for Datacleaning",                       "Library / package",
"Version",                   "Description",                                    "affy"
)
all_libraries %>%
kable(all_libraries, digits = 3, row.names = FALSE, align = "c", caption = "Table 1: summary of all libraries used") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
setwd("C:/Users/david/Documents/Data Analysis Lokal/Raw-Data/CEL_files")
setwd("C:\Users\merke\Documents\Vorlesungen Material\SS22\DataAnalysis\project\rawdata")
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/DataAnalysis/project/rawdata")
data.GSE15744 <- ReadAffy()
data.GSE15744@cdfName <- "HGU133Plus2_Hs_ENST"
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/DataAnalysis/project/report")
save(data.GSE15744, file="data.GSE15744.RData")
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/DataAnalysis/project/rawdata")
data.GSE15744 <- ReadAffy()
data.GSE15744@cdfName <- "HGU133Plus2_Hs_ENST"
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/DataAnalysis/project/report")
save(data.GSE15744, file="data.GSE15744.RData")
#make data accessible for everyone
githubURL <- "https://github.com/datascience-mobi-2022/2022-topic-04-team-01/blob/main/Report/data.GSE15744.RData"
load_github_data(githubURL)
data.GSE15744.vsnrma <- vsnrma(data.GSE15744)
for (i in 1:18) {
image(data.GSE15744[,i], col=rainbow(100, start = 0, end = 0.75)[100:1])
} # GSM394501 looks a bit brighter, GSM394527 looks very bright
meanSdPlot(data.GSE15744.vsnrma, xlab="Rank (mean)", ylab="Standard Deviation")
## Before
boxplot(data.GSE15744, col = rainbow(15),
cex.axis=0.5,
las=2,
ylab="Relative expression",
main="Raw Gene expression in human embryo (GSE15744, raw data)")
## After
boxplot(exprs(GSE15744.vsnrma), col = rainbow(15),
cex.axis=0.5,
las=2,
ylab="Relative expression",
main="Raw Gene expression in human embryo (GSE15744, normalized)")
## Before
boxplot(data.GSE15744, col = rainbow(15),
cex.axis=0.5,
las=2,
ylab="Relative expression",
main="Raw Gene expression in human embryo (GSE15744, raw data)")
## After
boxplot(exprs(GSE15744.vsnrma), col = rainbow(15),
cex.axis=0.5,
las=2,
ylab="Relative expression",
main="Raw Gene expression in human embryo (GSE15744, normalized)")
rnadeg.raw <- AffyRNAdeg(data.GSE15744)
plotAffyRNAdeg(rnadeg.raw, col=rainbow(18))
title(sub="Human embryo (GSE15744, Raw data)")
# Not scaled
plotAffyRNAdeg(rnadeg.raw, col=rainbow(18), transform = "shift.only")
title(sub="Human embryo (GSE15744, Raw data)")
# Comparison of some Scatter plots
for(i in 1:17){
plot(eset[,c(i,i+1)], pch=".", cex=2)
abline(0, 1, col="red")               # 45 degree dividing line
title(main = paste("Scatterplot of probe",
substr(colnames(GSE15744.vsnrma)[i], 1, nchar(colnames(GSE15744.vsnrma)[i])), "and",
substr(colnames(GSE15744.vsnrma)[i+1], 1, nchar(colnames(GSE15744.vsnrma)[i+1])),
sep=" ", collapse = NULL))
file.name <- paste("C:/Users/david/Documents/Data Analysis Lokal/Plots/Scatterplots/Scatterplot_GSE15744.pdf",
as.character(substr(colnames(GSE15744.vsnrma)[i], 1, nchar(colnames(GSE15744.vsnrma)[i]))), "_",
as.character(substr(colnames(GSE15744.vsnrma)[i+1], 1, nchar(colnames(GSE15744.vsnrma)[i+1]))),
".pdf", sep="")
dev.copy2pdf(file = file.name)
dev.off()
}
knitr::opts_chunk$set(echo = TRUE)
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
#pca ueber zeilen (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transpose our data frame to obtain PC scores for genes, not weeks
scale. = TRUE # we want the data scaled to have unit variance
)
library(Rcpp)
library(tidyverse)
library(affy)
library(vsn)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
#setwd("C:/Users/david/Documents/Data Analysis Lokal/2022-topic-04-team-01/R Scripts")
#setwd("F:/Data Analysis Project/Github Repo/2022-topic-04-team-01/R Scripts") #Paul
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts") #Verena
#setwd("C:/Daten/Data Analysis Projekt/Github Repo/2022-topic-04-team-01/R Scripts")
load("embryo_df_tra.RData")
colnames(embryo_df_tra)
dim(embryo_df_tra)
head(embryo_df_tra)
str(embryo_df_tra)
#sum(apply(embryo_df_tra, 1, fun))
library(tidyverse)
#Make Tissue names more accessible
a = separate(embryo_df_tra, tissues, into = as.character(c(1:30)), sep="/")
create_tissue_vector = function(f) {
f = unlist(f)
f = f[!is.na(f)]
return(f)
}
tissues = apply(a[,31:60],1, create_tissue_vector)
tissues = sapply(tissues, unlist)
a = a[,c(1:30, 61)]
a %>% add_column(tissues = NA)
a$tissues = tissues
embryo_df_tissues = a
save(embryo_df_tissues, file="embryo_df_tissues.RData")
setwd("C:/Users/merke/Documents/Vorlesungen Material/SS22/GitHub/2022-topic-04-team-01/R Scripts")
load("week9-4_diff.RData")
week9_4_diff_tra = embryo_df_tissues[embryo_df_tissues$ensembl.transcript %in% tra_diff$ensembl.transcript, ]
save(week9_4_diff_tra, file="week9_4_diff_tra.RData")
library(limma)
#Differential gene expression: Limma Analysis 2, between weeks
limma_data = as.data.frame(embryo_df_tissues[1:18], rownames = embryo_df_tissues$ensembl.transcript)
weeks = c("week4", "week5", "week6", "week7", "week8", "week9")
f = factor(c("week4", "week4", "week4", "week5", "week5", "week5", "week6", "week6", "week6", "week7", "week7", "week7", "week8", "week8", "week8", "week9", "week9", "week9"), levels =weeks)
design = model.matrix(~0+f)
colnames(design) =  weeks
fit_2 = lmFit(limma_data, design)
contrast_all = makeContrasts(week9-week8, week9-week7, week9-week6, week9-week5, week9-week4, week8-week7,week8-week6, week8-week5, week8-week4, week7-week6, week7-week5, week7-week4, week6-week5, week6-week4, week5-week4, levels = design)
fit_all = contrasts.fit(fit_2, contrast_all)
fit_all = eBayes(fit_all)
results_all = decideTests(fit_all)
summary(results_all)
# Ausgabe mit Gennamen für einen Vergleich
top.table = topTable(fit_all,1, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
top.table[which(top.table$adj.P.Val < 0.01), ]
#Create list of all differentially expresssed genes
diff_genes_list_0.01 = c()
for (i in 1:15) {
top.table = topTable(fit_all,i, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
diff_genes_list_0.01 = c(diff_genes_list_0.01, rownames(top.table[which(top.table$adj.P.Val < 0.01), ]))
}
length(diff_genes_list_0.01) #4538
diff_genes_list_0.01 = diff_genes_list_0.01[!duplicated(diff_genes_list_0.01)]
length(diff_genes_list_0.01) #1818
#List with 5%
diff_genes_list_0.05 = c()
for (i in 1:15) {
top.table = topTable(fit_all,i, n = Inf)
n = sapply(rownames(top.table), function(x){
embryo_df_tissues$ensembl.transcript[as.numeric(x)]
})
row.names(top.table) = n
diff_genes_list_0.05 = c(diff_genes_list_0.05, rownames(top.table[which(top.table$adj.P.Val < 0.05), ]))
}
diff_genes_list_0.05 = diff_genes_list_0.05[!duplicated(diff_genes_list_0.05)]
#Select differential genes from annotated dataframe
diff_genes_ann_0.01 = embryo_df_tissues[embryo_df_tissues$ensembl.transcript %in% diff_genes_list_0.01, ]
save(diff_genes_ann_0.01, file = "diff_genes_ann_0.01.RData")
#pca ueber zeilen (genes)
pca_genes <- prcomp(
t(diff_genes_ann_0.01[,1:18]), # transpose our data frame to obtain PC scores for genes, not weeks
scale. = TRUE # we want the data scaled to have unit variance
)
summary(pca_genes)
pca_genes
pca_genes_df <- data.frame(pca_genes$x[, 1:2])
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
#geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
#geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
#geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
#varianz von pca erklärt
pc_eigenvalues <- pca_genes$sdev^2
pc_eigenvalues <- tibble(PC = factor(1:length(pc_eigenvalues)),
variance = pc_eigenvalues) %>%
# add a new column with the percent variance
mutate(pct = variance/sum(variance)*100) %>%
# add another column with the cumulative variance explained
mutate(pct_cum = cumsum(pct))
pc_eigenvalues %>%
ggplot(aes(x = PC)) +
geom_col(aes(y = pct)) +
geom_line(aes(y = pct_cum, group = 1)) +
geom_point(aes(y = pct_cum)) +
labs(x = "Principal component", y = "Fraction variance explained")
var_explained = pca_genes$sdev^2 / sum(pca_genes$sdev^2)
qplot(c(1:4), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
var_explained = pca_genes$sdev^2 / sum(pca_genes$sdev^2)
qplot(c(1:18), var_explained) +
geom_line() +
xlab("Principal Component") +
ylab("Variance Explained") +
ggtitle("Scree Plot") +
ylim(0, 1)
all_libraries <- tibble::tribble(
~Library...package,                        ~Version,                              ~Description,
"affy",                              NA, "library used for unpacking the raw data",
"vsn",                              NA,   "library for the vsn rma normalization",
"AnnotationDbi",                              NA,                                        NA,
"tidyverse", "library used for Datacleaning",                       "Library / package",
"Version",                   "Description",                                    "affy"
)
all_libraries %>%
kable(all_libraries, digits = 3, row.names = FALSE, align = "c", caption = "Table 1: summary of all libraries used") %>%
kable_styling(bootstrap_options = "striped", full_width = FALSE)
#plotting pca_genes
ggbiplot(pca_genes, labels=colnames(diff_genes_ann_0.01)[1:18])
library(devtools)
library(devtools)
#library(devtools)
install_github("vqv/ggbiplot")
#library(devtools)
#install_github("vqv/ggbiplot")
library(ggbiplot)
library(psych)
#plotting pca_genes
ggbiplot(pca_genes, labels=colnames(diff_genes_ann_0.01)[1:18])
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
#ggplot
pca_genes_plot <- ggplot(
pca_genes_df,
aes(
x = PC1,
y = PC2,
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_genes_plot
head(diff_genes_ann_0.01)
dim(diff_genes_ann_0.01)
install.packages("devtools", repo="http://cran.us.r-project.org")
library(devtools)
install.packages("devtools")
install.packages("devtools", repo="http://cran.us.r-project.org")
library(devtools)
#plotting pca_genes
ggbiplot(pca_genes, groups=max.tissue, labels=colnames(diff_genes_ann_0.01)[1:18])
ggbiplot(pca_genes, groups='max.tissue', labels=colnames(diff_genes_ann_0.01)[1:18])
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
ggbiplot(pca_genes, groups=diff_genes_ann_0.01$max.tissue, labels=colnames(diff_genes_ann_0.01)[1:18])
#plotting pca_genes
ggbiplot(pca_genes, labels=colnames(diff_genes_ann_0.01)[1:18])
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(3,4))
#ggplot
pca_genes_plot <- ggplot(
pca_genes_df,
aes(
x = PC1,
y = PC2,
)
) +
geom_point() + # Plot individual points to make a scatterplot
theme_classic() # Format as a classic-looking plot with no gridlines
# Print out the plot here
pca_genes_plot
The simplest and most handsome example
wine.pca <- prcomp(diff_genes_ann_0.01, scale. = TRUE)
wine.pca <- prcomp(diff_genes_ann_0.01, scale. = TRUE)
wine.pca <- prcomp(t(diff_genes_ann_0.01[,1:18]), scale. = TRUE)
# Demo Style
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
wine.pca <- prcomp(t(diff_genes_ann_0.01[,1:18]), scale. = TRUE)
# Demo Style
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
# basic style
plot(wine.pca$x) # The original picture, you can try to draw, can not bear to look directly at
#plotting pca_genes
ggbiplot(pca_genes,)
text(diff_genes_ann_0.01$max.tissue),
ggbiplot(pca_genes,)
text(diff_genes_ann_0.01$max.tissue)
#plotting pca_genes
ggbiplot(pca_genes)
ggbiplot(pca_genes, choices=c(2,3))
ggbiplot(pca_genes, choices=c(1,3))
githubURL <- "https://github.com/datascience-mobi-2022/2022-topic-04-team-01/blob/main/Report/data.GSE15744.RData"
load_github_data(githubURL)
library(affy)
library(AnnotationDbi)
library(hgu133plus2hsenstprobe)
library(hgu133plus2hsenstcdf)
library(Rcpp)
library(tidyverse)
library(vsn)
library(limma)
library(pheatmap)
library(hexbin)
library(biomaRt)
library(kableExtra)
library(Rfssa)
library(ggbiplot)
library(magrittr)
library(dplyr)
library(stringr)
library(ggrepel)
#make data accessible for everyone
githubURL <- "https://github.com/datascience-mobi-2022/2022-topic-04-team-01/blob/main/Report/data.GSE15744.RData"
load_github_data(githubURL)
#make data accessible for everyone
githubURL <- "https://github.com/datascience-mobi-2022/2022-topic-04-team-01/blob/main/Report/data.GSE15744.RData"
load_github_data(githubURL)
